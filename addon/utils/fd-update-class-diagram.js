import Ember from 'ember';
import getJsonForDiagram from './get-json-for-diagram';

/**
  Copy array definition in view.
*/
let findDiagram = function(store, devClass, system) {
  let diagrams = system.get('diagrams').toArray();
  let diagram;
  switch (devClass.get('stereotype')) {
    case null:
    case '«implementation»':
      let classesDiagram = diagrams.findBy('name', 'AutogeneratedClassDiagram_classes');
      diagram = classesDiagram ? classesDiagram : createClassDiagram(store, system, 'AutogeneratedClassDiagram_classes');
      break;
    case '«typedef»':
    case '«type»':
    case '«enumeration»':
      let typesDiagram = diagrams.findBy('name', 'AutogeneratedClassDiagram_types');
      diagram = typesDiagram ? typesDiagram : createClassDiagram(store, system, 'AutogeneratedClassDiagram_types');
      break;
    default:
      let formsDiagram = diagrams.findBy('name', 'AutogeneratedClassDiagram_forms');
      diagram = formsDiagram ? formsDiagram : createClassDiagram(store, system, 'AutogeneratedClassDiagram_forms');
  }

  return Ember.A([diagram]);
};

/**
  Create class diagram.
*/
let createClassDiagram = function(store, system, diagramName) {
  return store.createRecord('fd-dev-uml-cad', {
    name: diagramName,
    primitivesJsonString: '[]',
    caseObjectsString: '',
    subsystem: system
  });
};

/**
  Records classes and his properties on diagram.
*/
export default function updateClassDiagram(store, devClass) {

  let currentProjectContext = Ember.getOwner(this).lookup('service:fd-current-project-context');
  let stagePk = currentProjectContext.getCurrentStage();
  let system = currentProjectContext.getAutogeneratedSystemModel();

  let className = devClass.get('name');
  let attributes = devClass.get('attributes').toArray();

  // Exist current class on diagram.
  let allDiagrams = store.peekAll('fd-dev-uml-cad');
  let diagramsCurrentStage = allDiagrams.filterBy('subsystem.stage.id', stagePk);
  let diagrams = Ember.A(diagramsCurrentStage).filter(function(diagram) {
    let caseObjectsString = diagram.get('caseObjectsString');
    return !Ember.isNone(caseObjectsString) && caseObjectsString.indexOf(`Class:(${className})`) !== -1;
  });

  if (diagrams.length === 0) {
    diagrams = findDiagram(store, devClass, system);
  }

  let classObject = getJsonForDiagram.call(this, className, attributes);

  diagrams.forEach((diagram) => {
    let primitivesJsonString = diagram.get('primitivesJsonString');
    let primitivesJsonArray = Ember.A(JSON.parse(primitivesJsonString));
    let desiredClass = primitivesJsonArray.findBy('CaseName', className);
    if (desiredClass) {
      let index = primitivesJsonArray.indexOf(desiredClass);
      primitivesJsonArray.replace(index, 1, classObject);
    } else {
      primitivesJsonArray.pushObject(classObject);
      let caseObjectsString = diagram.get('caseObjectsString');
      let mockCaseObjectsString = caseObjectsString ? caseObjectsString + ';' : '';
      let newCaseObjectsString = mockCaseObjectsString + `Class:(${className})`;
      diagram.set('caseObjectsString', newCaseObjectsString);
    }

    let newPrimitivesJsonString = JSON.stringify(primitivesJsonArray);
    diagram.set('primitivesJsonString', newPrimitivesJsonString);
    diagram.save();
  });

  // Проблемы:
  // Не проставляется статус обновления, при изменении существующей диограммы (в одата сервисе DataObjectController.modyfidata UpdateObject)
  // Диаграммы грузятся в стор не c тем типом.

  // Нужно добавить:
  // обновить referenceCount.
  // Функции для связей.
  // В вин ормах поправить парсинг (в JsonBaseConverter для typeof(RectangleF) (float)(double)GetJPropertyValue(jobj, <value>) заменить на float.Parse(GetJPropertyValue(jobj, <value>).ToString()) )
}
