/**
  @module ember-flexberry-designer
*/

import Service, { inject as service } from '@ember/service';
import { assert } from '@ember/debug';
import { Promise, resolve } from 'rsvp';
import { isNone } from '@ember/utils';

import moment from 'moment';
import Evented from '@ember/object/evented';
import { SimplePredicate, ComplexPredicate } from 'ember-flexberry-data/query/predicate';
import Builder from 'ember-flexberry-data/query/builder';
import Condition from 'ember-flexberry-data/query/condition';
import FilterOperator from 'ember-flexberry-data/query/filter-operator';
import FdReadonlyProjectMixin from '../mixins/fd-readonly-project';

/**
  Service allows to save current application context.

  @class FdCurrentProjectContextService
  @extends <a href="http://emberjs.com/api/classes/Ember.Service.html">Ember.Service</a>
*/
export default Service.extend(FdReadonlyProjectMixin, Evented, {

  /**
    Flag indicates single project mode.

    @property singleStageMode
    @type Boolean
    @default false
  */
  singleStageMode: false,

  /**
    Stores current configuration, stage, class.

    @property context
    @type Object
  */
  context: undefined,

  /**
    Store of current application.

    @property store
    @type DS.Store or subclass
  */
  store: service('store'),

  /**
    Router service of current application.

    @property router
    @type RouterService
  */
  router: service(),

  /**
    Service for managing the message dialog.

    @property fdDialogService
    @type fdDialogService
  */
  fdDialogService: service('fd-dialog-service'),

  /**
    Stores version current stage.

    @property versionCurrentStage
    @type Date
  */
  versionCurrentStage: undefined,

  /**
    Set current configuration.

    @method setCurrentConfiguration
    @param {DS.Model} configuration New current configuration.
  */
  setCurrentConfiguration(configuration) {
    this.set('context.configuration', configuration.get('id'));
    this.set('context.configurationModel', configuration);
    this.set('context.stage', undefined);
    this.set('context.stageModel', undefined);
    this.set('context.system', undefined);
    this.set('context.systemModel', undefined);
    this.set('context.systemIsSet', false);
    this.set('context.systemPromise', undefined);
    this.set('context.class', undefined);
    this.set('context.classModel', undefined);
    this.set('versionCurrentStage', undefined);
  },

  /**
    Get `id` of current configuration.

    @method getCurrentConfiguration
    @return {String} Id of current configuration.
  */
  getCurrentConfiguration() {
    let configuration = this.get('context.configuration');

    assert('Current configuration is not set.', configuration);

    return configuration;
  },

  /**
    Get current configuration model.

    @method getCurrentConfigurationModel
    @return {DS.Model} Current configuration model.
  */
  getCurrentConfigurationModel() {
    let configuration = this.get('context.configurationModel');

    return configuration;
  },

  /**
    Set current stage.

    @method setCurrentStage
    @param {DS.Model} stage New current stage.
  */
  setCurrentStage(stage) {
    assert('Stage must belong to the current configuration.', this.get('context.configuration') === stage.get('configuration.id'));

    this.set('context.stage', stage.get('id'));
    this.set('context.stageModel', stage);
    this.set('context.system', undefined);
    this.set('context.systemModel', undefined);
    this.set('context.systemIsSet', false);
    this.set('context.systemPromise', undefined);
    this.set('context.class', undefined);
    this.set('context.classModel', undefined);
    this.set('versionCurrentStage', undefined);

    if (this.get('readonlyModeProject')) {
      return;
    }

    let store = this.get('store');
    let modelName = 'fd-dev-system';
    let projectionName = 'SearchSystem';
    let systemName = 'Autogenerated';

    let stagePredicate = new SimplePredicate('stage', FilterOperator.Eq, stage.get('id'));
    let systemNamePredicate = new SimplePredicate('name', FilterOperator.Eq, systemName);
    let predicate = new ComplexPredicate(Condition.And, stagePredicate, systemNamePredicate);

    let builder = new Builder(store)
    .from(modelName)
    .selectByProjection(projectionName)
    .where(predicate);

    let _this = this;
    let promise = new Promise(function(resolve, reject) {
      store.query(modelName, builder.build()).then((result) => {
        if (!result || result.get('length') !== undefined && result.get('length') === 0) {
          store.createRecord(modelName, {
            name: systemName,
            stage: stage
          }).save().then((systemAfterSave) => {
            _this.set('context.system', systemAfterSave.get('id'));
            _this.set('context.systemModel', systemAfterSave);
            _this.set('context.systemIsSet', true);
            resolve(systemAfterSave);
          }).catch(function(reason) {
            reject(reason);
          });
        } else {
          let system = result.objectAt(0);
          _this.set('context.system', system.get('id'));
          _this.set('context.systemModel', system);
          _this.set('context.systemIsSet', true);
          resolve(system);
        }
      }).catch(function(reason) {
        reject(reason);
      });
    });

    this.set('context.systemPromise', promise);
  },

  /**
    Get current stage id.

    @method getCurrentStage
    @return {String} Current stage id.
  */
  getCurrentStage() {
    let stageId = this.get('context.stage');

    if (!stageId)
    {
      this._transitionToSelectStage();
    }

    return stageId;
  },

  /**
    Get current stage model.

    @method getCurrentStageModel
    @return {DS.Model} Current stage model.
  */
  getCurrentStageModel() {
    let stageModel = this.get('context.stageModel');

    if (!stageModel)
    {
      this._transitionToSelectStage();
    }

    return stageModel;
  },

  /**
    Get promise for loading stage's autogenerated system.

    @method getAutogeneratedSystemPromise
    @return {Ember.RSPV.Promise} Promise for loading stage's system.
  */
  getAutogeneratedSystemPromise() {
    let promise = this.get('context.systemPromise');

    if (this.get('readonlyModeProject')) {
      return resolve();
    }

    assert('Promise for loading stage\'s system is not set.', promise);

    return promise;
  },

  /**
    Get flag indicating stage's autogenerated system model is set.

    @method isAutogeneratedSystemSet
    @return {Boolean} Flag indicating stage's autogenerated system is set.
  */
  isAutogeneratedSystemSet() {
    return this.get('context.systemIsSet');
  },

  /**
    Get `id` of autogenerated system model for current stage.

    @method getAutogeneratedSystem
    @return {String} Id of autogenerated system for current stage.
  */
  getAutogeneratedSystem() {
    let system = this.get('context.system');

    assert('Autogenerated system for stage is not set.', system);

    return system;
  },

  /**
    Get autogenerated system's model for current stage.

    @method getAutogeneratedSystemModel
    @return {DS.Model} Autogenerated system's model for current stage.
  */
  getAutogeneratedSystemModel() {
    let system = this.get('context.systemModel');

    assert('Autogenerated system for stage is not set.', system);

    return system;
  },

  /**
    Reset current stage.

    @method resetCurrentStage
  */
  resetCurrentStage() {
    this.set('context.stage', undefined);
    this.set('context.stageModel', undefined);
    this.set('context.system', undefined);
    this.set('context.systemModel', undefined);
    this.set('context.systemIsSet', false);
    this.set('context.systemPromise', undefined);
    this.set('context.class', undefined);
    this.set('context.classModel', undefined);
    this.set('versionCurrentStage', undefined);
    this.get('router').transitionTo('fd-all-projects');
  },

  /**
    Set version current stage.

    @method setVersionCurrentStage
  */
  setVersionCurrentStage(changeDate) {
    this.set('versionCurrentStage', changeDate);

    this._checkActualVersionStage();
  },

  init() {
    this._super(...arguments);

    this.set('context', {});
  },

  /**
    Check the current stage version.

    @method _checkActualVersionStage
  */
  _checkActualVersionStage() {
    let versionCurrentStage = this.get('versionCurrentStage');
    if (!isNone(versionCurrentStage)) {
      let store = this.get('store');
      let adapter = store.adapterFor('application');
      const stage = this.getCurrentStage();
      const data = { stageId: stage };

      adapter.callFunction('GetStageLastChangeTime', data, null, { withCredentials: true }).then((result) => {
        if (!isNone(result.value)) {
          let momentDate = moment(result.value);
          if (momentDate.isAfter(versionCurrentStage)) {
            this.trigger('NeedSyncStageTriggered');
          } else {
            setTimeout(() => {
              this._checkActualVersionStage();
            }, 300000);
          }
        }
      }).catch(() => {
        let message = window.i18n.t('forms.services.sync-error').toString();
        this.get('fdDialogService').showErrorMessage(message);
      })
    }
  },

  /**
    Perform transition to initial stage selection route.

    @method _transitionToSelectStage
  */
  _transitionToSelectStage() {
    this.get('router').transitionTo('fd-all-projects');
  }
});
