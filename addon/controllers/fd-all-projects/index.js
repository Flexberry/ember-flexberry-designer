/**
  @module ember-flexberry-designer
*/

import Controller from '@ember/controller';
import { inject as service } from '@ember/service';
import FdPreloadStageMetadata from 'ember-flexberry-designer/utils/fd-preload-stage-metadata';

/**
  The controller for the form with a list of all projects.

  @class FdAllProjectsIndexController
  @extends Ember.Controller
*/
export default Controller.extend({
  /**
    Set by the {{#crosslink "FdAllProjectsIndexRoute"}}route{{/crosslink}}, indicates that this controller is now active.

    @property active
    @type Boolean
    @default false
  */
  active: false,

  /**
    Service for managing the state of the application.
     @property appState
    @type AppStateService
  */
  appState: service(),

  /**
    Link to {{#crossLink "FdCurrentProjectContextService"}}{{/crossLink}}.

    @property projectContext
    @type FdCurrentProjectContextService
  */
  projectContext: service('fd-current-project-context'),

  /**
    Request to search for projects.

    @property search
    @type String
    @default ''
  */
  search: '',

  /**
    See [EmberJS API](https://emberjs.com/api/).

    @property queryParams
  */
  queryParams: ['search'],

  actions: {
    /**
      Choose a project for further work with it.

      @method actions.chooseProject
      @param {DS.Model} project The selected project.
    */
    chooseProject(project) {
      let projectContext = this.get('projectContext');
      let store = this.get('store');

      projectContext.setCurrentConfiguration(project.get('configuration'));
      projectContext.setCurrentStage(project);

      // Clear store.
      store.unloadAll('fd-dev-class');
      store.unloadAll('fd-dev-association');
      store.unloadAll('fd-dev-aggregation');
      store.unloadAll('fd-dev-inheritance');
      store.unloadAll('fd-dev-system');
      store.unloadAll('new-platform-flexberry-services-lock');

      this.get('appState').loading();
      FdPreloadStageMetadata.call(this, store, projectContext.getCurrentStage()).then(() =>
        projectContext.getAutogeneratedSystemPromise()).then(() => {
          this.get('appState').reset();
          this.transitionToRoute('fd-application-model');
        });
    },

    /**
      Pin the selected project.

      @method actions.pinProject
      @param {DS.Model} project The selected project.
    */
    pinProject(/* project */) {
      throw new Error('Not implemented.');
    },
  },
});
