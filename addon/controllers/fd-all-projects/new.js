/**
  @module ember-flexberry-designer
*/

import Controller from '@ember/controller';
import FdPreloadStageMetadata from 'ember-flexberry-designer/utils/fd-preload-stage-metadata';
import { computed } from '@ember/object';
import { isNone, isBlank } from '@ember/utils';
import { inject as service } from '@ember/service';
import { Promise } from 'rsvp';
import Builder from 'ember-flexberry-data/query/builder';
import { transliteration } from 'ember-flexberry-designer/utils/fd-transliteration';

/**
  The controller for the project creation form.

  @class FdAllProjectsNewController
  @extends Ember.Controller
*/
export default Controller.extend({
  /**
    The project name.

    @property projectName
    @type String
  */
  projectName: undefined,

  /**
    The product name.

    @property productName
    @type String
  */
  productName: undefined,

  /**
    The project description.

    @property projectDescription
    @type String
  */
  projectDescription: undefined,

  /**
    Access value.

    @property accessIsPublic
    @type Bool
  */
  accessIsPublic: true,

  /**
    Service for managing the state of the application.
     @property appState
    @type AppStateService
  */
  appState: service(),

  /**
    Link to {{#crossLink "FdCurrentProjectContextService"}}{{/crossLink}}.

    @property currentProjectContext
    @type FdCurrentProjectContextService
  */
  currentProjectContext: service('fd-current-project-context'),

  /**
    Locale key with example project name.

    @property nameExample
    @type String
    @readOnly
  */
  nameExample: computed(function() {
    // Parts of `forms/fd-all-projects` locale keys.
    let examples = ['library', 'school', 'university', 'museum', 'gallery'];
    let example = examples[Math.floor(Math.random() * examples.length)];

    return example;
  }).readOnly(),

  /**
    A search query on the project list that will be used as the project name.

    @property nameFromSearch
    @type String
    @default ''
  */
  nameFromSearch: '',

  /**
    See [EmberJS API](https://emberjs.com/api/).

    @property queryParams
  */
  queryParams: ['nameFromSearch'],

  /**
    Check lexical structure.

    @method keyPressPattern
  */
  keyPressPattern(e) {
    if(!((e.keyCode >= 48 && e.keyCode <= 57) || (e.keyCode >= 65 && e.keyCode <= 90) || (e.keyCode >= 97 && e.keyCode <= 122) || e.keyCode === 95)) {
      e.preventDefault();
    }
  },

  actions: {
    /**
      Cancel create new stage.

      @method actions.cancelButton
    */
    cancelButton() {
      this.transitionToRoute('fd-all-projects');
    },

    /**
      Create new stage.

      @method actions.createStage
    */
    createStage() {
      const store = this.get('store');
      const currentProjectContext = this.get('currentProjectContext');

      let configuration = currentProjectContext.getCurrentConfigurationModel();

      return new Promise(function(resolve) {
        if (isNone(configuration)) {
          const modelName = 'fd-configuration';
          const builder = new Builder(store)
          .from(modelName)
          .selectByProjection('ListFormView')
          .top(1);

          store.query(modelName, builder.build()).then(result => {
            configuration = result.firstObject;
            resolve();
          });
        } else {
          resolve();
        }
      })
      .then(() => {
        const projectName = this.get('projectName');
        const productName = this.get('productName');

        const product = isBlank(productName) ? transliteration(projectName) : productName;
        const stage = store.createRecord('fd-dev-stage', {
          name: projectName,
          product: product,
          description: this.get('projectDescription'),
          configuration: configuration,
        });

        this.get('appState').loading();

        return stage.save();
      })
      .then((stage) => {
        currentProjectContext.setCurrentConfiguration(configuration);
        currentProjectContext.setCurrentStage(stage);

        return FdPreloadStageMetadata.call(this, store, currentProjectContext.getCurrentStage());
      })
      .then(() => currentProjectContext.getAutogeneratedSystemPromise())
      .then(() => {
        this.transitionToRoute('fd-application-model');
      })
      .finally(() => {
        this.get('appState').reset();
      });
    }
  }
});
