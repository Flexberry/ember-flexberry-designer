import { module, test } from 'qunit';
import startApp from 'dummy/tests/helpers/start-app';
import { createClassPrimitive, deletePrimitives, getUpdatedViews } from 'ember-flexberry-designer/utils/fd-update-class-diagram';
import { getJsonForClass, getJsonForLink } from 'ember-flexberry-designer/utils/get-json-for-diagram';
import { A } from '@ember/array';
import { run } from '@ember/runloop';
import FdViewAttributesProperty from 'ember-flexberry-designer/objects/fd-view-attributes-property';

let App;
let store;
let currentProjectContext;

module('Unit | Utility | fd update class diagram', {
  beforeEach() {
    App = startApp();
    store = App.__container__.lookup('service:store');
    currentProjectContext = App.__container__.lookup('service:fd-current-project-context');
  },

  afterEach() {
    run(App, 'destroy');
  },
});

test('Create primitives on diagram test', function(assert) {
  run(() => {
    const className = 'testClass';
    const attributesStr = '+testAttribute:string';
    const testClass = store.createRecord('fd-dev-class', { name: className, attributesStr: attributesStr });

    const stage = store.createRecord('fd-dev-stage', { name: "StageName" });
    const system = store.createRecord('fd-dev-system', { name: "Autogenerated", stage: stage });
    
    currentProjectContext.set('context.systemModel', system);

    const diagram = createClassPrimitive(store, currentProjectContext, testClass);

    assert.equal(diagram.get('name'), `AutogeneratedDiagramForClass_${className}`, `diagram AutogeneratedDiagramForClass_${className} created`);
    assert.equal(diagram.get('primitives').length, 1, 'One primitive has been created in the diagram');
    assert.equal(diagram.get('primitives')[0].name, className, `Primitive is named ${className}`);
    assert.equal(diagram.get('primitives')[0].attributes[0], attributesStr, `Primitive has attribute ${attributesStr}`);
  });
});

test('Delete primitives from diagram test', function(assert) {
  run(() => {
    const startClassName = 'startClass';
    const endClassName = 'endClass';
    const startClass = store.createRecord('fd-dev-class', { id: startClassName, name: startClassName });
    const endClass = store.createRecord('fd-dev-class', { id: endClassName, name: endClassName});

    const stage = store.createRecord('fd-dev-stage', { name:"StageName", id: 123 });
    const system = store.createRecord('fd-dev-system', { name:"Autogenerated", stage: stage });
    
    currentProjectContext.set('context.systemModel', system);
    currentProjectContext.set('context.stage', stage.get('id'));
  
    const diagramName = 'TestDiagram';
    const diagram = store.createRecord('fd-dev-uml-cad', {
      name: diagramName,
      primitivesJsonString: '[]',
      caseObjectsString: `Class:(${startClass.get('name')});Class:(${endClass.get('name')})`,
      subsystem: system
    });
  
    const startPrimitiveJson = getJsonForClass(startClass, { X: 300, Y: 300 } );
    const endPrimitiveJson = getJsonForClass(endClass, { X: 300, Y: 300 } );

    const linkPrimitiveJson = getJsonForLink(
      'STORMCASE.UML.cad.Association, UMLCAD',
      startPrimitiveJson.$id,
      null,
      endPrimitiveJson.$id,
      null,
      A(),
      { Name: '', StartMultTxt: '', EndMultTxt: '', StartRoleTxt: '', EndRoleTxt: '' },
      { NamePos: 0.0, InitialMultiplicity: 1.0 }
    );

    diagram.set('primitivesJsonString', JSON.stringify([
      startPrimitiveJson,
      endPrimitiveJson,
      linkPrimitiveJson, 
    ]));

    const diagramPrimitives = JSON.parse(diagram.get('primitivesJsonString'));
    assert.equal(Object.keys(diagramPrimitives).length, 3, 'There are three primitives on the diagram');
  
    const primitivesOnDelete = deletePrimitives(store, currentProjectContext, [startClass]);

    primitivesOnDelete.forEach((diagram) => {
      const diagramPrimitives = JSON.parse(diagram.get('primitivesJsonString'));

      assert.equal(diagram.get('name'), diagramName, `Removed class from diagram ${diagramName}`);
      assert.equal(Object.keys(diagramPrimitives).length, 1, 'There is only one primitive left on the diagram');
      assert.equal(diagramPrimitives[0].$id, `{${endClassName}}`, `Class ${startClassName} removed from diagram`);
      assert.equal(diagramPrimitives[0].$type, 'STORMCASE.STORMNET.Repository.CADClass, STORM.NETCaseToolPlugin', 'All connections have been removed from the diagram');
    })
  });
});

test('Update all view', function(assert) {
  run(() => {
    const startClassName = 'testClass';
    const testClass = store.createRecord('fd-dev-class', { id: startClassName, name: startClassName });

    const testClassOldName = 'testClassOld';
    const testClassNewName = 'testClassNew';
    const propertyName = 'propertyName';
  
    const viewCount = 2;
    
    for (let i = 0; i < viewCount; i++) {
      store.createRecord('fd-dev-view', {
        class: testClass,
        name: `testViewName${i}`,
        definitionArray: A([FdViewAttributesProperty.create({ name: `${testClassOldName}.${propertyName}` })]),
      })
    }

    const testPrimitiveJson = getJsonForClass(testClass, { X: 300, Y: 300 } );
    const viewsOnUpdate = getUpdatedViews(store, [testPrimitiveJson], testClassOldName, testClassNewName);

    assert.equal(viewsOnUpdate.length, viewCount, `${viewCount} views have been changed`);

    viewsOnUpdate.forEach((view) => {
      const definitionArray = view.get('definitionArray');
      assert.equal(definitionArray.length, 1, 'One view definition item');
      assert.equal(definitionArray[0].name, `${testClassNewName}.${propertyName}`, 'View definition item is renamed');
    })
  });
});